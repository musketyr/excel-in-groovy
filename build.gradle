plugins {
    id 'org.ajoberstar.github-pages' version '1.5.1'
    id 'org.asciidoctor.gradle.asciidoctor' version '1.5.1'
}

String currentVersion = '0.4.1'

version = currentVersion

subprojects {
    version = currentVersion

    apply plugin: 'groovy'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.9'
        compile group: 'com.google.guava', name: 'guava', version: '21.0'

        testCompile group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4'
    }
}

task exercisesArchive(type: Zip) {
    archiveName = 'excel-in-groovy.zip'
    from('.') {
        exclude '.git'
        exclude '.idea'
        exclude '.gradle'
        exclude 'build'
        exclude 'docs'
        exclude '.gitignore'
        exclude 'README.adoc'
    }
}

task copyExercisesArchive(dependsOn: exercisesArchive, type: Copy) {
    into "$asciidoctor.outputDir/html5/archives"
    from exercisesArchive.archivePath
}

// asciidoctor publishing
asciidoctor {

    sourceDir = file('docs')

    resources {
        from(sourceDir) {
            include 'css/**', 'images/**'
        }
    }

    attributes 'docinfo1': ['version': currentVersion],
        'imagesdir': 'images',
        'source-highlighter': 'highlight.js',
        'stylesdir': 'css',
        icons: 'font',
        'toc': 'left',
        version: project.version,
        'projectUrl': 'https://github.com/musketyr/excel-in-groovy'
}

githubPages {
    repoUri = 'https://github.com/musketyr/excel-in-groovy'

    credentials {
        username = getPropertyOrUseDefault('githubToken', '')
        password = ''
    }

    pages {
        from file(asciidoctor.outputDir.path + '/html5')
    }
}

asciidoctor.dependsOn copyExercisesArchive
publishGhPages.dependsOn asciidoctor



String getPropertyOrUseDefault(String propertyName, String defaultValue) {
    hasProperty(propertyName) ? getProperty(propertyName) : defaultValue
}
